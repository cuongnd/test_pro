<?php
/**
 * @package     Joomla.Legacy
 * @subpackage  Table
 *
 * @copyright   Copyright (C) 2005 - 2014 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

defined('_JEXEC') or die(__FILE__);
/**
 * general table
 *
 * @package     Joomla.Legacy
 * @subpackage  Table
 * @since       11.1
 * @deprecated  Class will be removed upon completion of transition to UCM
 */
class JTableGeneral extends JTable
{
    /**
     *
     * Constructor
     *
     * @param   JDatabaseDriver  $db  A database connector object
     *
     * @since   11.1
     */
    public $id=0;
    public function __construct(JDatabaseDriver $db)
    {
        parent::__construct('#__ecommerce_general', 'id', $db);

    }
    public function load($keys = null, $reset = true)
    {
        // Implement JObservableInterface: Pre-processing by observers
        $this->_observers->update('onBeforeLoad', array($keys, $reset));

        if (empty($keys))
        {
            $empty = true;
            $keys  = array();

            // If empty, use the value of the current key
            foreach ($this->_tbl_keys as $key)
            {
                $empty      = $empty && empty($this->$key);
                $keys[$key] = $this->$key;
            }

            // If empty primary key there's is no need to load anything
            if ($empty)
            {
                return true;
            }
        }
        elseif (!is_array($keys))
        {
            // Load by primary key.
            $keyCount = count($this->_tbl_keys);

            if ($keyCount)
            {
                if ($keyCount > 1)
                {
                    throw new InvalidArgumentException('Table has multiple primary keys specified, only one primary key value provided.');
                }
                $keys = array($this->getKeyName() => $keys);
            }
            else
            {
                throw new RuntimeException('No table keys defined.');
            }
        }

        if ($reset)
        {
            $this->reset();
        }

        // Initialise the query.
        $query = $this->_db->getQuery(true)
            ->select('*')
            ->from($this->_tbl)
            ->leftJoin('#__ecommerce_general_en_gb AS general_en_gb USING(id)')
        ;
        $fields = array_keys($this->getProperties());
        foreach ($keys as $field => $value)
        {
            // Check that $field is in the table.
            if (!in_array($field, $fields))
            {
                throw new UnexpectedValueException(sprintf('Missing field in database: %s &#160; %s.', get_class($this), $field));
            }
            // Add the search tuple to the query.
            $query->where($this->_db->quoteName($field) . ' = ' . $this->_db->quote($value));
        }

        $this->_db->setQuery($query);

        $row = $this->_db->loadAssoc();

        // Check that we have a result.
        if (empty($row))
        {
            $result = false;
        }
        else
        {
            // Bind the object with the row and return.
            $result = $this->bind($row);
        }

        // Implement JObservableInterface: Post-processing by observers
        $this->_observers->update('onAfterLoad', array(&$result, $row));

        return $result;
    }
    public function getFields()
    {
        static $cache = null;

        if ($cache === null)
        {
            // Lookup the fields for this table only once.
            $name   = $this->_tbl;
            $fields = $this->_db->getTableColumns($name, false);
            $fields+= $this->_db->getTableColumns('#__ecommerce_general_en_gb', false);
            if (empty($fields))
            {
                throw new UnexpectedValueException(sprintf('No columns found for %s table', $name));
            }

            $cache = $fields;
        }

        return $cache;
    }

    public function check()
    {
        return true;
    }
    public function store($updateNulls = true)
    {
        return parent::store($updateNulls); // TODO: Change the autogenerated stub
    }
    /**
     * Overloaded bind function
     *
     * @param   array  $array   Named array
     * @param   mixed  $ignore  An optional array or space separated list of properties to ignore while binding.
     *
     * @return  mixed  Null if operation was satisfactory, otherwise returns an error
     *
     * @see     JTable::bind()
     * @since   11.1
     */


    #endregion
}
